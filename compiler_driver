#!/bin/sh
set -e

# Preprocess the source file
gcc -E -P $2 -o preprocessed_file.i

# Compile the preprocessed file and output an assembly file
# This process is stubbed for now since we don't have a compiler
# quite yet
while [[ "$1" == --* ]]; do
    case "$1" in
        --lex)
            rm preprocessed_file.i
            java lexer $2
            exit $?
            ;;
        --parse)
            echo "This option is not yet implemented"
            rm preprocessed_file.i
            exit 1
            ;;
        --codegen)
            echo "This option is not yet implemented"
            rm preprocessed_file.i
            exit 1
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# NOTE: 
# You might also want to add a -S option that directs your compiler to emit
# an assembly file, but not assemble or link it. You’ll need this option to run
# the tests in Part III; it isn’t required for Parts I and II, but it’s useful
# for debugging

touch assembly.s
rm preprocessed_file.i

# Assemble and link the assembly file to produce an executable
dir=$(dirname "$1")
filename=$(basename "$1" .c)

# Define the path for the new executable
new_executable="$dir/$filename"

gcc assembly.s -o "$new_executable"
chmod +x "$new_executable"
rm assembly.s
exit 0
